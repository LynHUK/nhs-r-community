{
  "hash": "29bc2f05fb2bdbb8b5839bc31d5fc852",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to extrapolate data from data\"\ndate: \"23 July 2018\"\ndate-modified: '23 March 2024'\ncategories:\n  - Strings\nauthor: Sebastian Zeki\nsubtitle: >\n  \"Extracting data using {grepl} and {stringr}\"\n---\n\n\nThere are many occasions when a column of data needs to be created from an already existing column for ease of data manipulation. For example, perhaps you have a body of text as a pathology report and you want to extract all the reports where the diagnosis is ‘dysplasia’. \n\nYou could just subset the data using grepl so that you only get the reports that mention this word…but what if the data needs to be cleaned prior to subsetting like excluding reports where the diagnosis is normal but the phrase ‘No evidence of dysplasia’ is present. Or perhaps there are other manipulations needed prior to subsetting.\n\nThis is where data accordionisation is useful. This simply means the creation of data from (usually) a column into another column in the same dataframe.\n\nThe neatest way to do this is with the mutate function from the {dplyr} package which is devoted to data cleaning. There are also other ways which I will demonstrate at the end.\n\nThe input data here will be an endoscopy data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAge <- sample(1:100, 130, replace = TRUE)\nDx <- sample(c(\"NDBE\", \"LGD\", \"HGD\", \"IMC\"), 130, replace = TRUE)\nTimeOfEndoscopy <- sample(1:60, 130, replace = TRUE)\n\nlibrary(dplyr)\n\nEMRdf <- data.frame(Age, Dx, TimeOfEndoscopy, stringsAsFactors = F)\n```\n:::\n\n\nPerhaps you need to calculate the number of hours spent doing each endoscopy rather than the number of minutes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEMRdftbb <- EMRdf %>% mutate(TimeOfEndoscopy / 60)\n\n# install.packages(\"knitr\")\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Just show the top 20 results\n\nkable(head(EMRdftbb, 20))\n```\n\n::: {.cell-output-display}\n\n\n| Age|Dx   | TimeOfEndoscopy| TimeOfEndoscopy/60|\n|---:|:----|---------------:|------------------:|\n|  87|NDBE |              24|          0.4000000|\n|  41|NDBE |              48|          0.8000000|\n|  15|LGD  |              40|          0.6666667|\n|  16|HGD  |              19|          0.3166667|\n|  38|IMC  |              22|          0.3666667|\n|  87|IMC  |              52|          0.8666667|\n|  29|HGD  |              55|          0.9166667|\n|  20|IMC  |              45|          0.7500000|\n|  83|NDBE |              45|          0.7500000|\n|  97|HGD  |              22|          0.3666667|\n|  17|NDBE |              50|          0.8333333|\n|  81|NDBE |              16|          0.2666667|\n|  39|NDBE |              40|          0.6666667|\n|  43|HGD  |              34|          0.5666667|\n|  12|IMC  |              56|          0.9333333|\n|  62|NDBE |              11|          0.1833333|\n|  68|LGD  |              51|          0.8500000|\n|  37|LGD  |              35|          0.5833333|\n|  92|LGD  |               7|          0.1166667|\n|  38|IMC  |              57|          0.9500000|\n\n\n:::\n:::\n\n\nThat is useful but what if you want to classify the amount of time spent doing each endoscopy as follows: <0.4 hours is too little time and >0.4 hours is too long.\n\nUsing `ifelse()` with mutate for conditional accordionisation.\n\nFor this we would use `ifelse()`. However this can be combined with mutate() so that the result gets put in another column as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEMRdf2 <- EMRdf %>%\n  mutate(TimeInHours = TimeOfEndoscopy / 60) %>%\n  mutate(TimeClassification = ifelse(TimeInHours > 0.4, \"Too Long\", \"Too Short\"))\n\n# Just show the top 20 results\n\nkable(head(EMRdf2, 20))\n```\n\n::: {.cell-output-display}\n\n\n| Age|Dx   | TimeOfEndoscopy| TimeInHours|TimeClassification |\n|---:|:----|---------------:|-----------:|:------------------|\n|  87|NDBE |              24|   0.4000000|Too Short          |\n|  41|NDBE |              48|   0.8000000|Too Long           |\n|  15|LGD  |              40|   0.6666667|Too Long           |\n|  16|HGD  |              19|   0.3166667|Too Short          |\n|  38|IMC  |              22|   0.3666667|Too Short          |\n|  87|IMC  |              52|   0.8666667|Too Long           |\n|  29|HGD  |              55|   0.9166667|Too Long           |\n|  20|IMC  |              45|   0.7500000|Too Long           |\n|  83|NDBE |              45|   0.7500000|Too Long           |\n|  97|HGD  |              22|   0.3666667|Too Short          |\n|  17|NDBE |              50|   0.8333333|Too Long           |\n|  81|NDBE |              16|   0.2666667|Too Short          |\n|  39|NDBE |              40|   0.6666667|Too Long           |\n|  43|HGD  |              34|   0.5666667|Too Long           |\n|  12|IMC  |              56|   0.9333333|Too Long           |\n|  62|NDBE |              11|   0.1833333|Too Short          |\n|  68|LGD  |              51|   0.8500000|Too Long           |\n|  37|LGD  |              35|   0.5833333|Too Long           |\n|  92|LGD  |               7|   0.1166667|Too Short          |\n|  38|IMC  |              57|   0.9500000|Too Long           |\n\n\n:::\n:::\n\n\nNote how we can chain the `mutate()` function together.\n\nUsing multiple `ifelse()`\n\nWhat if we want to get more complex and put several classifiers in? We just use more `ifelse`’s:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEMRdf2 <- EMRdf %>%\n  mutate(TimeInHours = TimeOfEndoscopy / 60) %>%\n  mutate(TimeClassification = ifelse(TimeInHours > 0.8, \"Too Long\", ifelse(TimeInHours < 0.5, \"Too Short\", ifelse(TimeInHours >= 0.5 & TimeInHours <= 0.8, \"Just Right\", \"N\"))))\n\n# Just show the top 20 results\n\nkable(head(EMRdf2, 20))\n```\n\n::: {.cell-output-display}\n\n\n| Age|Dx   | TimeOfEndoscopy| TimeInHours|TimeClassification |\n|---:|:----|---------------:|-----------:|:------------------|\n|  87|NDBE |              24|   0.4000000|Too Short          |\n|  41|NDBE |              48|   0.8000000|Just Right         |\n|  15|LGD  |              40|   0.6666667|Just Right         |\n|  16|HGD  |              19|   0.3166667|Too Short          |\n|  38|IMC  |              22|   0.3666667|Too Short          |\n|  87|IMC  |              52|   0.8666667|Too Long           |\n|  29|HGD  |              55|   0.9166667|Too Long           |\n|  20|IMC  |              45|   0.7500000|Just Right         |\n|  83|NDBE |              45|   0.7500000|Just Right         |\n|  97|HGD  |              22|   0.3666667|Too Short          |\n|  17|NDBE |              50|   0.8333333|Too Long           |\n|  81|NDBE |              16|   0.2666667|Too Short          |\n|  39|NDBE |              40|   0.6666667|Just Right         |\n|  43|HGD  |              34|   0.5666667|Just Right         |\n|  12|IMC  |              56|   0.9333333|Too Long           |\n|  62|NDBE |              11|   0.1833333|Too Short          |\n|  68|LGD  |              51|   0.8500000|Too Long           |\n|  37|LGD  |              35|   0.5833333|Just Right         |\n|  92|LGD  |               7|   0.1166667|Too Short          |\n|  38|IMC  |              57|   0.9500000|Too Long           |\n\n\n:::\n:::\n\n\nUsing multiple `ifelse()` with `grepl()` or string_extract\n\nOf course we need to extract information from text as well as numeric data. We can do this using `grepl()` or `string_extract()` from the `library(stringr)`.\n\nLet’s say we want to extract all the samples that had IMC. We don’t want to subset the data, just extract IMC into a column that says IMC and the rest say ’Non-IMC’\n\nUsing the dataset above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\nEMRdf$MyIMC_Column <- str_extract(EMRdf$Dx, \"IMC\")\n\n# to fill the NA's we would do:EMRdf$MyIMC_Column<-ifelse(grepl(\"IMC\",EMRdf$Dx),\"IMC\",\"NoIMC\")\n\n# Another way to do this (really should be for more complex examples when you want to extract the entire contents of the cell that has the match)\n\nEMRdf$MyIMC_Column <- ifelse(grepl(\"IMC\", EMRdf$Dx), str_extract(EMRdf$Dx, \"IMC\"), \"NoIMC\")\n```\n:::\n\n\nSo data can be usefully created from data for further analysis.\n\nHopefully this way of extrapolating data and especially using conditional expressions to categorise data according to some rules is a helpful way to get more out of your data.\n\nPlease follow [@gastroDS](https://twitter.com/GastroDS) on twitter\n\nThis article originally appeared on [https://sebastiz.github.io/gastrodatascience/](https://sebastiz.github.io/gastrodatascience/) and has been edited to render in Quarto and had [NHS-R styles](https://nhsrway.nhsrcommunity.com/style-guides.html#style-guide-for-code) applied.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}